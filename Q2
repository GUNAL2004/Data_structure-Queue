You are developing a task scheduler for a company. Tasks can be added to the scheduler at either the beginning or the end of the day, and tasks can also be removed from either end of the schedule. Implement a TaskScheduler class using a Deque to manage the tasks. Provide methods to add tasks to the front and back, and to remove tasks from the front and back. Finally, display all the tasks currently in the scheduler.


Input Format:

First Line must consists of one of the name(addFront, addBack, removeFront, removeBack).
Second Line consists of either, you can add or remove the tasks
Note:
Give Exit or exit or EXIT to stop getting input from the user.
If there is a empty queue,it must display ,No tasks in the scheduler 
If there is no task to remove in front,it must display,No tasks to remove from the front
If there is no task to remove from back,it must display,No tasks to remove from the back

Output Format:
Display all the tasks currently in the scheduler. 

Sample Input:
addFront
Finish the Home Page
addBack
Off the switches
exit

Sample Output
Finish the Home Page
Off the switches

Sample Input2
addFront
Allot the work to Team
addFront
Make the arrangements for Meeting
addBack
Arrange for Refreshments
addBack
Arrange for Lunch
removeFront
removeBack
EXIT

Sample Output2
Make the arrangements for Meeting
Arrange for Lunch
Allot the work to Team
Arrange for Refreshments

Here,Make the arrangements for Meeting,Arrange for Lunch those two are removed tasks. The current tasks which are available in the scheduler are: Allot the work to Team,Arrange for Refreshments



SOLUTION:



class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Queue:
    def __init__(self):
        self.head=None
    #insert at the beginning
    def addFront(self,data):
        new_node=Node(data)
        new_node.next=self.head
        self.head=new_node
    #insert at the end
    def addBack(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
        else:
            current=self.head
            while current.next:
                current=current.next
            current.next=new_node
    #Deletion at the beginning
    def removeFront(self):
        if self.head is None:
            print("No tasks to remove from the front")
            return
        self.head = self.head.next
    #Deletion at the end
    def removeBack(self):
        if not self.head:
            print("No tasks to remove from the back")
            return
        if not self.head.next:
            self.head = None
            return
        current=self.head
        while current.next.next:
            current=current.next
        current.next = None  
    def display(self):
        current=self.head
        if(current==None):
            print("No tasks in the scheduler")
        else:
            while(current!=None):
                print(current.data)
                current=current.next
       
#main program
qu=Queue()
exit=["exit","Exit","EXIT"]
while True:
    name=input()
    if(name in exit):
        break
    else:
        if(name=="addFront"):
            bname=input()
            qu.addFront(bname)
        elif(name=="addBack"):
            bname=input()
            qu.addBack(bname)
        elif(name=="removeFront"):
            qu.removeFront()
        elif(name=="removeBack"):
            qu.removeBack()
qu.display()        

